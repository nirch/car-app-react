{"version":3,"sources":["components/CarRow/CarRow.js","model/CarModel.js","pages/CarsPage/CarsPage.js","App.js","reportWebVitals.js","index.js"],"names":["CarRow","car","isHighest","onDoubleClick","console","log","className","brand","model","year","km","parseInt","kmPerYear","CarModel","this","age","Date","getFullYear","CarsPage","props","useState","cars","setCars","highestKmPerYear","carRows","map","Container","Table","hover","Button","onClick","concat","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAeeA,MAbf,YAAmC,IAAlBC,EAAiB,EAAjBA,IAAKC,EAAY,EAAZA,UAClB,OACI,qBAAIC,cAAe,kBAAMC,QAAQC,IAAIJ,IACjCK,UAAWJ,EAAY,YAAc,GADzC,UAEI,6BAAKD,EAAIM,QACT,6BAAKN,EAAIO,QACT,6BAAKP,EAAIQ,OACT,6BAAKR,EAAIS,KACT,6BAAKC,SAASV,EAAIW,mB,gBCMfC,E,WAdX,WAAYN,EAAOC,EAAOC,EAAMC,GAAK,oBACjCI,KAAKP,MAAQA,EACbO,KAAKN,MAAQA,EACbM,KAAKL,KAAOA,EACZK,KAAKJ,GAAKA,E,6CAGd,WACI,IACMK,GADc,IAAIC,MAAOC,cACLH,KAAKL,KAAO,EACtC,OAAOK,KAAKJ,GAAKK,M,KCoCVG,MA3Cf,SAAkBC,GAAQ,IAAD,IACGC,mBAAS,CAC7B,IAAIP,EAAS,SAAU,QAAS,KAAM,MACtC,IAAIA,EAAS,SAAU,SAAU,KAAM,OACvC,IAAIA,EAAS,UAAW,MAAO,KAAM,QAJpB,mBACdQ,EADc,KACRC,EADQ,KAQjBC,EAAmBF,EAAK,GARP,cASHA,GATG,IASrB,2BAAwB,CAAC,IAAdpB,EAAa,QAChBA,EAAIW,YAAcW,EAAiBX,cACnCW,EAAmBtB,IAXN,8BAoBrB,IAAMuB,EAAUH,EAAKI,KAAI,SAAAxB,GAAG,OAAI,cAAC,EAAD,CAAQA,IAAKA,EAAKC,UAAWD,EAAIW,cAAgBW,EAAiBX,iBAElG,OACI,eAACc,EAAA,EAAD,CAAWpB,UAAU,SAArB,UACI,eAACqB,EAAA,EAAD,CAAOC,OAAK,EAAZ,UACI,gCACI,+BACI,uCACA,uCACA,sCACA,oCACA,kDAGR,gCACKJ,OAGT,cAACK,EAAA,EAAD,CAAQC,QAvBhB,WACIR,EAAQD,EAAKU,OAAO,IAAIlB,EAAS,SAAU,KAAM,KAAM,QAsBnD,yBChCGmB,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c35ce388.chunk.js","sourcesContent":["import React from 'react';\n\nfunction CarRow({car, isHighest}) {\n    return (\n        <tr onDoubleClick={() => console.log(car)}\n            className={isHighest ? \"bg-danger\" : \"\"}>\n            <td>{car.brand}</td>\n            <td>{car.model}</td>\n            <td>{car.year}</td>\n            <td>{car.km}</td>\n            <td>{parseInt(car.kmPerYear())}</td>\n        </tr>\n    );\n}\n\nexport default CarRow;","\nclass CarModel {\n    constructor(brand, model, year, km) {\n        this.brand = brand;\n        this.model = model;\n        this.year = year;\n        this.km = km;\n    }\n\n    kmPerYear() {\n        const currentYear = new Date().getFullYear();\n        const age = currentYear - this.year + 1;\n        return this.km / age;\n    }\n}\n\nexport default CarModel;","import React, { useState } from 'react';\nimport { Button, Container, Table } from 'react-bootstrap';\nimport CarRow from '../../components/CarRow/CarRow';\nimport CarModel from '../../model/CarModel';\n\nfunction CarsPage(props) {\n    const [cars, setCars] = useState([\n        new CarModel(\"Toyota\", \"Yaris\", 2002, 240000),\n        new CarModel(\"Toyota\", \"Corola\", 2015, 115000),\n        new CarModel(\"Hyundai\", \"i30\", 2010, 180000)\n    ]);\n\n    // finding the car with the highest km per year\n    let highestKmPerYear = cars[0];\n    for (const car of cars) {\n        if (car.kmPerYear() > highestKmPerYear.kmPerYear()) {\n            highestKmPerYear = car;\n        }\n    }\n\n    function addCar() {\n        setCars(cars.concat(new CarModel(\"Subaru\", \"B4\", 2018, 100000)));\n    }\n\n\n    const carRows = cars.map(car => <CarRow car={car} isHighest={car.kmPerYear() === highestKmPerYear.kmPerYear()}/>)\n\n    return (\n        <Container className=\"p-cars\">\n            <Table hover>\n                <thead>\n                    <tr>\n                        <th>Brand</th>\n                        <th>Model</th>\n                        <th>Year</th>\n                        <th>KM</th>\n                        <th>KM Per Year</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {carRows}\n                </tbody>\n            </Table>\n            <Button onClick={addCar}>Add Car</Button>\n        </Container>\n    );\n}\n\nexport default CarsPage;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport CarsPage from './pages/CarsPage/CarsPage';\n\nfunction App() {\n  return (\n    <div>\n      <CarsPage/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}